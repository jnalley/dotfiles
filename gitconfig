[user]
  name = (none)
  email = (none)
  useConfigOnly = true
[core]
  excludesfile = ~/.gitignore
[include]
  path = ~/.git.user
[push]
  default = nothing
[pull]
  rebase = true
[init]
  defaultBranch = main
[branch]
  autosetuprebase = always
[color]
  branch = auto
  diff = auto
  interactive = auto
  status = auto
  ui = auto
[color "branch"]
  current = yellow
  local = yellow bold
  remote = magenta
[color "diff"]
  commit = yellow bold
  frag = yellow bold
  func = green dim
  meta = green
  new = blue
  old = red
  plain = white bold
  whitespace = red reverse
[color "status"]
  added = green
  changed = blue
  untracked = red
  branch = yellow bold
[mergetool "vimdiff3"]
  cmd = vim -f -d -c \"wincmd J\" \"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\"
[difftool "vim"]
  cmd = vim \"$MERGED\"
  prompt = false
[merge]
  stat = true
  ff = only
[commit]
  template = ~/.gitmessage
[fetch]
  prune = true
[rebase]
  autosquash = true
  autostash = true
[alias]
  aa = add --all
  br = "!(git x-heads --color=always; git x-remotes --color=always) | column -ts'|'"
  x-heads = for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset)|%(color:red)%(objectname:short)%(color:reset)|%(authorname)|%(color:green)%(committerdate:relative)%(color:reset)'
  x-remotes = for-each-ref --sort=-committerdate refs/remotes/ --format='  %(color:yellow)%(refname:short)%(color:reset)|%(color:red)%(objectname:short)%(color:reset)|%(authorname)|%(color:green)%(committerdate:relative)%(color:reset)'
  ci = commit -v
  co = checkout
  dc = diff --cached
  df = diff
  st = status --short --branch
  l = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=local
  g = grep --break --heading --line-number
  gg = "!f() { git grep $1 $(git rev-list --all); }; f"
  tags = tag --sort=v:refname
  fp = push --force-with-lease
  # commits not pushed to $1
  unpushed = cherry -v
  # what tag contains the sha
  whatrelease = name-rev --name-only
  # what branch contains the sha
  contains = branch --contains
  # squash ALL commits
  squash-all = rebase -i --root
[grep]
  extendRegexp = true
  lineNumber = true
[filter "lfs"]
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
